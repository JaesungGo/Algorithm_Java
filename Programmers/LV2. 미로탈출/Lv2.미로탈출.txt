## 문제 파악

1*1 크기의 칸들 (통로 or 벽) -> 직사각형 격자 형태의 미로
칸들 중 하나는 빠져나가는 문 , 레버가 필요 ( 레버 또한 한 칸에 있음 )
출발 -> 레버 칸 이동 -> 레버 당김 -> 탈출 칸
레버를 당기지 않아도 출구 칸을 지나갈 수 있다.
미로 한칸당 1초 소요

미로 문자열 배열 maps
return 미로를 탈출하는데 필요한 최소 시간 , 탈출 할 수 없다면 -1

제한사항
5<= maps.length <= 100 (maps의 low 길이)
5<= maps[0].length <= 100 (maps의 column길이)
O : 통로
X : 벽
L : 레버
E : 출구
S : 시작 지점

시작, 출구, 레버는 항상 다른 곳에 존재
통로, 출구, 레버, 시작점은 "여러번" 지나갈 수 있다.

최소 : 시작 -> 레버 -> 출구

return : (시작에서 레버로 가는 최단 시간 + 레버에서 출구로 가는 최단 시간)

## 배우게 된 점

경계 체크 조건 설정 시 조건의 순서에 따라 배열오류가 던져질 수 있음 

- **첫 번째 조건문**에서는 `visited[nr][nc]`와 `maps[nr].charAt(nc) != 'X'`를 먼저 체크한 후, `nr >= 0` 및 `nc >= 0`을 확인합니다. 경계 체크가 `maps[nr].charAt(nc)` 호출 전에 수행되지 않습니다.
- **두 번째 조건문**에서는 `nr`과 `nc`의 유효성을 먼저 확인하여 배열의 경계를 초과하지 않도록 합니다. 이 조건이 배열 접근 전에 수행되므로, 경계 초과로 인한 예외를 방지할 수 있습니다.

시작지점 설정하는 거 다시보기